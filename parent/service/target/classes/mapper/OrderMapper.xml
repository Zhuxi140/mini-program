<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.zhuxi.mapper.OrderMapper">

    <insert id="insert" useGeneratedKeys="true" keyColumn="id" keyProperty="id">
        INSERT INTO `order`(order_sn,user_id, product_id, spec_id, address_id,product_quantity, total_amount,status)
        VALUES (
                #{orderSn},
                #{userId},
                #{productId},
                #{specId},
                #{addressId},
                #{productQuantity},
                #{totalAmount},
                #{status}
               )
    </insert>


    <insert id="insertOrderList">
        INSERT INTO
        `order`(order_sn,group_id,user_id, product_id, spec_id, address_id,product_quantity, total_amount,status)
        VALUES
            <foreach collection="orderAddDTO" item="item" separator=",">
                (
                #{item.orderSn},
                #{item.groupId},
                #{item.userId},
                #{item.productId},
                #{item.specId},
                #{item.addressId},
                #{item.productQuantity},
                #{item.totalAmount},
                #{item.status}
                )
            </foreach>
    </insert>

    <insert id="insertPaymentList">
        INSERT INTO payment(payment_sn,user_id, order_id, total_amount,status)
        VALUES
            <foreach collection="paymentAddDTO" item="item" separator=",">
                (
                #{item.paymentSn},
                #{item.userId},
                #{item.orderId},
                #{item.totalAmount},
                #{item.status}
                )
            </foreach>
    </insert>

    <insert id="insertInventoryLockList">
        INSERT INTO inventory_lock(product_id,order_id,spec_id,  quantity, status, expire_time)
        VALUES
            <foreach collection="inventoryLockAddDTOS" item="item" separator=",">
                (
                #{item.productId},
                #{item.orderId},
                #{item.specId},
                #{item.quantity},
                0,
                DATE_ADD(now(),INTERVAL 30 MINUTE)
                )
            </foreach>
    </insert>

    <select id="getProductRealStockList" resultType="java.lang.Integer">
        SELECT real_stock.stock FROM real_stock WHERE spec_id IN
        <foreach item="item" collection="specIds" separator="," open="(" close=")">
            #{item}
        </foreach>
    </select>

    <select id="getProductSaleStockList" resultType="java.lang.Integer">
        SELECT spec.stock FROM spec WHERE id IN
        <foreach item="item" collection="specIds" separator="," open="(" close=")">
            #{item}
        </foreach>
    </select>

    <select id="getProductPreStockList" resultType="java.lang.Integer">
        SELECT COALESCE(SUM(l.quantity),0),t.spec_id
        FROM
        (
           <foreach collection="specIds" item="specId" separator="UNION ALL">
               SELECT #{specId} AS spec_id
           </foreach>
        ) t
        LEFT JOIN inventory_lock l
        ON t.spec_id = l.spec_id
        AND l.status = 0
        AND l.expire_time > now()
        GROUP BY  t.spec_id
        ORDER BY FIELD(
             t.spec_id,
             <foreach collection="specIds" item="specId" separator=",">
                 #{specId}
             </foreach>
        )
    </select>


    <update id="cancelOrderList">
        UPDATE `order`SET status = 4 WHERE id IN
        <foreach item="item" collection="orderIds" separator="," open="(" close=")">
            #{item}
        </foreach>
    </update>

    <update id="cancelPaymentList">
        UPDATE payment SET status = 4 WHERE order_id IN
        <foreach item="item" collection="orderIds" separator="," open="(" close=")">
            #{item}
        </foreach>
    </update>


    <update id="releaseInventoryLockList">
        UPDATE inventory_lock SET status = 2 WHERE order_id IN 
        <foreach collection="orderIds" item="orderId" separator="," open="(" close=")">
            #{orderId}
        </foreach>
    </update>

    <update id="reduceProductSaleStockList">
        UPDATE spec
        SET stock =
        CASE id
        <foreach collection="specIds" item="specId" index="index">
            WHEN #{specId} THEN stock - #{quantity[${index}]}
        </foreach>
        END
        WHERE id IN
        <foreach collection="specIds" item="specId" open="("  close=")"  separator=",">
            #{specId}
        </foreach>

    </update>


    <select id="getInventoryLockQuantityList" resultType="Integer">
        SELECT quantity
        FROM inventory_lock
        WHERE order_id IN
        <foreach item="orderId" collection="orderIds" separator="," open="(" close=")">
            #{orderId}
        </foreach>
        ORDER BY
        FIELD(order_id,
        <foreach collection="orderIds" item="orderId" separator="," >
            #{orderId}
        </foreach>
        )
    </select>

    <select id="getSpecIdList" resultType="java.lang.Long">
        SELECT  inventory_lock.spec_id
        FROM inventory_lock
        WHERE order_id IN 
        <foreach collection="orderIds" item="orderId" separator="," open="(" close=")">
            #{orderId}
        </foreach>
        ORDER BY FIELD(order_id,
        <foreach collection="orderIds" item="orderId" separator=",">
            #{orderId}
        </foreach>
         )

        </select>

    <select id="getOrderList" resultType="src.main.java.com.zhuxi.pojo.VO.Order.OrderShowVO">
    <![CDATA[
        SELECT o.id,
                o.order_sn,
                o.group_id,
                p.name    AS product_name,
                spec.spec AS spec_name,
                p.cover_url,
                o.total_amount,
                o.status,
                o.created_at
         FROM `order` o
         JOIN product p ON o.product_id = p.id
         INNER JOIN spec ON o.spec_id = spec.id
         WHERE o.user_id = #{userId}
           AND  o.status != 7
           AND o.created_at < #{createdAt}
         ORDER BY created_at DESC,o.id DESC
         LIMIT #{pageSize}
    ]]>
    </select>
    <select id="getOrderRedisList" resultType="src.main.java.com.zhuxi.pojo.DTO.Order.OrderRedisDTO">
            SELECT
            o.id,
            o.order_sn,
            o.group_id,
            p.name AS product_name,
            s.spec AS spec_name,
            p.cover_url,
            o.total_amount,
            o.status,
            o.created_at
        FROM `order` o
        JOIN product p ON o.product_id = p.id
        INNER JOIN spec s ON o.spec_id = s.id
        WHERE o.id > #{lastId} AND user_id = #{userId}
        ORDER BY created_at DESC,o.id DESC
        LIMIT #{pageSize}
    </select>

    <update id="releaseProductSaleStockList">
     UPDATE spec
     SET stock =
     CASE id
     <foreach collection="specIds" item="specId" index="index">
         WHEN #{specId} THEN stock + #{quantityList[${index}]}
     </foreach>
    END
     WHERE id IN
    <foreach collection="specIds" item="specId" open="("  close=")"  separator=",">
        #{specId}
    </foreach>
    </update>




</mapper>