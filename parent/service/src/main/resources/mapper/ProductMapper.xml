<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.zhuxi.mapper.ProductMapper">
    <select id="getListProductByCreate"  resultType="src.main.java.com.zhuxi.pojo.VO.Product.ProductOverviewVO">
    <![CDATA[
        SELECT
            id,
            name,
            mini_price.price,
            cover_url,
            created_at
        FROM product
        JOIN
            (SELECT product_id,MIN(price) AS price FROM spec GROUP BY product_id) mini_price
        ON product.id = mini_price.product_id
        WHERE product.created_at < #{dateTime} AND status = 1
        ORDER BY created_at DESC,id DESC
        LIMIT #{pageSize}
    ]]>
    </select>

    <select id="getListProductByPriceDESC"
            resultType="src.main.java.com.zhuxi.pojo.VO.Product.ProductOverviewVO">
         <![CDATA[
        SELECT
            id,
            name,
            mini_price.price,
            cover_url,
            created_at
        FROM product
                 JOIN
                 (SELECT product_id,MIN(price) AS price FROM spec GROUP BY product_id) mini_price
                 ON product.id = mini_price.product_id
        WHERE  (mini_price.price > #{price} OR ( mini_price.price = #{price} AND id > #{lastId})) AND status = 1
        ORDER BY mini_price.price ASC,id ASC
        LIMIT #{pageSize}
        ]]>
    </select>

    <select id="getListProductByPriceASC"
            resultType="src.main.java.com.zhuxi.pojo.VO.Product.ProductOverviewVO">
             <![CDATA[
        SELECT
            id,
            name,
            mini_price.price,
            cover_url,
            created_at
        FROM product
                 JOIN
                 (SELECT product_id,MIN(price) AS price FROM spec GROUP BY product_id) mini_price
                 ON product.id = mini_price.product_id
        WHERE (mini_price.price < #{price} OR mini_price.price = #{price} AND id < #{lastId}) AND status = 1
        ORDER BY created_at DESC,id DESC
        LIMIT #{pageSize}
        ]]>
    </select>

    <select id="getListProduct" resultType="src.main.java.com.zhuxi.pojo.VO.Product.ProductDetailVO">
        <![CDATA[
        SELECT
            id,
            snowflake_id,
            name,
            mini_price.price,
            cover_url,
            images,
            description,
            status,
            origin,
            created_at
        FROM product
                 JOIN
                 (SELECT product_id,MIN(price) AS price FROM spec GROUP BY product_id) mini_price
                 ON product.id = mini_price.product_id
        WHERE product.id > #{lastId} AND status = 1
        LIMIT #{pageSize}
        ]]>
    </select>

    <select id="getListAdminProductsDESC" resultType="src.main.java.com.zhuxi.pojo.VO.Admin.AdminProductVO">
      <![CDATA[
        SELECT
            product.id,
            product.name,
            product.cover_url,
            supplier.name AS supplier_name,
            COALESCE(COUNT(spec.id),0) AS spec_count,
            COALESCE(MIN(spec.price),0) AS min_price,
            COALESCE(MAX(spec.price),0) AS max_price,
            COALESCE(SUM(real_stock.stock),0) AS total_real_stock,
            COALESCE(SUM(spec.stock),0) AS onSale_stock,
            MAX(CASE WHEN real_stock.stock < 100 THEN 1 ELSE 0 END) AS stock_status
        FROM product JOIN supplier ON product.supplier_id = supplier.id
                     LEFT JOIN spec ON product.id = spec.product_id
                     LEFT JOIN real_stock ON spec.id = real_stock.spec_id
        WHERE product.id < #{lastId}
        GROUP BY product.id, product.name,product.cover_url,supplier.name
        ORDER BY product.id DESC
        LIMIT #{pageSize}
        ]]>
    </select>


    <select id="getListAdminProductsASC" resultType="src.main.java.com.zhuxi.pojo.VO.Admin.AdminProductVO">
        <![CDATA[
        SELECT
            product.id,
            product.name,
            product.cover_url,
            supplier.name AS supplier_name,
            COALESCE(COUNT(spec.id),0) AS spec_count,
            COALESCE(MIN(spec.price),0) AS min_price,
            COALESCE(MAX(spec.price),0) AS max_price,
            COALESCE(SUM(real_stock.stock),0) AS total_real_stock,
            COALESCE(SUM(spec.stock),0) AS onSale_stock,
            MAX(CASE WHEN real_stock.stock < 100 THEN 1 ELSE 0 END) AS stock_status
        FROM product JOIN supplier ON product.supplier_id = supplier.id
        LEFT JOIN spec ON product.id = spec.product_id
        LEFT JOIN real_stock ON spec.id = real_stock.spec_id
        WHERE product.id > #{lastId}
        GROUP BY product.id, product.name,product.cover_url,supplier.name
        ORDER BY product.id ASC
        LIMIT #{pageSize}
        ]]>
    </select>
    <select id="getSpec" resultType="src.main.java.com.zhuxi.pojo.DTO.product.SpecRedisDTO">
        SELECT
            spec.id,
            spec.product_id,
            product.snowflake_id AS product_snowflake,
            spec.snowflake_id,
            spec.spec,
            spec.purchase_price,
            spec.price AS sale_price,
            spec.cover_url,
            spec.stock
        FROM spec JOIN product ON spec.product_id = product.id
        WHERE spec.id > #{lastId} AND product.status = 1
        LIMIT #{pageSize}
    </select>


    <!--    <insert id="addSpec">-->
<!--    INSERT INTO spec(product_id,spec,price,stock)-->
<!--    VALUES-->
<!--        <foreach collection='list' item='spec' separator=','>-->
<!--        (-->
<!--            #{productId},-->
<!--            #{spec.spec},-->
<!--            #{spec.price},-->
<!--            0-->
<!--            )-->
<!--        </foreach>-->
<!--    </insert>-->

    <insert id="addRealStock">
        INSERT INTO real_stock(product_id, spec_id, stock)
             VALUES
        <foreach collection="list" item="rs" separator=",">
            (
            #{rs.productId},
            #{rs.specId},
            0
            )
        </foreach>
    </insert>

    <update id="updateProductBase">
        UPDATE product
        <set>
            <if test="base.supplierId != null">
                supplier_id = #{base.supplierId},
            </if>
            <if test="base.name != null">
                name = #{base.name},
            </if>
            <if test="base.description != null">
                description = #{base.description},
            </if>
            <if test="base.origin != null">
                origin = #{base.origin},
            </if>
        </set>
        WHERE id = #{base.id};
    </update>

    <update id="updateProductSpec">
        UPDATE spec
            <set>
                <if test="specU.spec != null">
                    spec = #{specU.spec},
                </if>
                <if test="specU.purchasePrice != null">
                    purchase_price = #{specU.purchasePrice},
                </if>
                <if test="specU.price != null">
                    price = #{specU.price},
                </if>
                <if test="specU.stock != null">
                    stock = #{specU.stock},
                </if>

            </set>
        WHERE product_id = #{productId} AND id = #{specU.id}

    </update>

    <update id="addBasePics">
        UPDATE product
        <set>
            <if test="coverUrl != null">
                cover_url = #{coverUrl},
            </if>
                <if test="images != null">
                    images = #{images},
                </if>
        </set>
        WHERE id = #{productId}
    </update>

</mapper>